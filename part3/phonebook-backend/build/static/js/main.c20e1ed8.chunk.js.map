{"version":3,"sources":["components/Filter.js","components/NewPersonForm.js","components/Numbers.js","services/Contacts.js","components/Notification.js","App.js","index.js"],"names":["Filter","newFilterName","handleFilterNameChange","value","onChange","NewPersonForm","props","addPerson","newName","newPhoneNumber","handleNameChange","handlePhoneNumberChange","onSubmit","type","Numbers","persons","handleRemoveContact","filteredList","filter","person","name","toLowerCase","includes","length","map","i","key","number","onClick","newContact","axios","post","then","response","data","id","delete","put","Notification","message","className","App","useState","setPersons","setNewName","setNewFilterName","setNewPhoneNumber","notificationMessage","setNotificationMessage","notificationType","setNotificationType","useEffect","get","event","target","preventDefault","newPerson","contacts","returnedContact","concat","setTimeout","window","confirm","find","p","catch","error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c20e1ed8.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Filter = ({ newFilterName, handleFilterNameChange }) => {\r\n    return (\r\n        <div>\r\n            filter shown with: <input\r\n                value={newFilterName}\r\n                onChange={handleFilterNameChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst NewPersonForm = (props) => {\r\n    const { addPerson, newName, newPhoneNumber, handleNameChange, handlePhoneNumberChange } = props\r\n\r\n    return (\r\n        <form onSubmit={addPerson}>\r\n            <div>\r\n                name: <input\r\n                    value={newName}\r\n                    onChange={handleNameChange}\r\n                />\r\n            </div>\r\n            <div>number: <input\r\n                value={newPhoneNumber}\r\n                onChange={handlePhoneNumberChange}\r\n            />\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default NewPersonForm","import React from 'react'\r\n\r\nconst Numbers = ({ persons, newFilterName, handleRemoveContact }) => {\r\n    const filteredList = persons.filter(person => person.name.toLowerCase().includes(newFilterName.toLowerCase()))\r\n\r\n    if (filteredList.length === 0) {\r\n        return <div>No person found</div>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {filteredList.map((person, i) => \r\n                <div key={i}>\r\n                    {person.name} {person.number} \r\n                    <button onClick={() => handleRemoveContact(person)}>delete</button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Numbers","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/persons'\r\n\r\nconst createContact = (newContact) => {\r\n    const request = axios.post(baseUrl, newContact)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst removeContact = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst updateContact = (id, newContact) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newContact)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { createContact, removeContact, updateContact }","import React from 'react'\r\n\r\nconst Notification = ({ message, type }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className={type}>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport NewPersonForm from './components/NewPersonForm'\nimport Numbers from './components/Numbers'\nimport axios from 'axios'\nimport contacts from './services/Contacts'\nimport './index.css'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newFilterName, setNewFilterName] = useState('')\n  const [newPhoneNumber, setNewPhoneNumber] = useState('')\n  const [notificationMessage, setNotificationMessage] = useState(null)\n  const [notificationType, setNotificationType] = useState('success')\n\n  useEffect(() => {\n    axios\n      .get('/api/persons')\n      .then(response => {\n        setPersons(response.data)\n      })\n  }, [])\n\n  const handleFilterNameChange = (event) => {\n    setNewFilterName(event.target.value)\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handlePhoneNumberChange = (event) => {\n    setNewPhoneNumber(event.target.value)\n  }\n\n  const handleRemoveContact = (person) => {\n    if (window.confirm(`Delete ${person.name}?`)) {\n      contacts\n        .removeContact(person.id)\n        .then(returnedContact => {\n          setPersons(persons.filter(p => p.id !== person.id))\n          setNotificationType('success')\n          setNotificationMessage(\n            `Deleted ${person.name}`\n          )\n          setTimeout(() => {\n            setNotificationMessage(null)\n          }, 5000)\n        })\n        .catch(error => {\n          setNotificationType('error')\n          setNotificationMessage(\n            `${person.name} was already removed from server`\n          )\n          setTimeout(() => {\n            setNotificationMessage(null)\n          }, 5000)\n          setPersons(persons.filter(p => p.name !== person.name))\n        })\n    }\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n\n    const newPerson = {\n      name: newName,\n      number: newPhoneNumber\n    }\n\n    // New person's name not in phonebook\n    if (persons.filter(person => person.name === newPerson.name).length === 0) {\n      contacts\n        .createContact(newPerson)\n        .then(returnedContact => {\n          setPersons(persons.concat(returnedContact))\n          setNotificationType('success')\n          setNotificationMessage(\n            `Added ${returnedContact.name}`\n          )\n          setTimeout(() => {\n            setNotificationMessage(null)\n          }, 5000)\n        })\n    }\n    // New Person already exists\n    else {\n      const message = `${newPerson.name} is already added to phonebook, replace the old number with a new one?`\n      if (window.confirm(message)) {\n        const id = persons.find(person => person.name === newPerson.name).id\n        contacts\n          .updateContact(id, newPerson)\n          .then(returnedContact => {\n            setPersons(persons.map(p =>\n              p.name === returnedContact.name ? returnedContact : p\n            ))\n            setNotificationType('success')\n            setNotificationMessage(\n              `Changed number for ${newPerson.name}`\n            )\n            setTimeout(() => {\n              setNotificationMessage(null)\n            }, 5000)\n          })\n          .catch(error => {\n            setNotificationType('error')\n            setNotificationMessage(\n              `${newPerson.name} was already removed from server`\n            )\n            setTimeout(() => {\n              setNotificationMessage(null)\n            }, 5000)\n            setPersons(persons.filter(p => p.name !== newPerson.name))\n          })\n      }\n    }\n\n    setNewName('')\n    setNewPhoneNumber('')\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification\n        message={notificationMessage}\n        type={notificationType}\n      />\n      <Filter\n        newFilterName={newFilterName}\n        handleFilterNameChange={handleFilterNameChange}\n      />\n      <h1>add a new</h1>\n      <NewPersonForm\n        addPerson={addPerson}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newPhoneNumber={newPhoneNumber}\n        handlePhoneNumberChange={handlePhoneNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Numbers\n        persons={persons}\n        newFilterName={newFilterName}\n        handleRemoveContact={handleRemoveContact}\n      />\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}